{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/SearchBox/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","mon","id","name","email","Component","CardList","map","key","SearchBox","placeholder","handleEvent","type","onChange","App","e","setState","searchField","target","value","state","array","fetch","then","response","json","users","filteredArray","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTAeeA,G,mMAVP,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,MAAMC,IAAG,+BAA0BC,KAAKC,MAAMC,IAAIC,GAAK,GAA9C,4BAClB,4BAAKH,KAAKC,MAAMC,IAAIE,MACpB,2BAAIJ,KAAKC,MAAMC,IAAIG,Y,GANhBC,cCWJC,E,iLARX,OACI,yBAAKV,UAAU,YACVG,KAAKC,MAAMG,KAAKI,KAAI,SAAAN,GAAG,OAAE,kBAAC,EAAD,CAAMA,IAAKA,EAAKO,IAAKP,EAAIC,a,GAJxCG,aCDVI,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,YAAd,OACrB,2BACIC,KAAK,SACLF,YAAaA,EACbd,UAAU,SACViB,SAAUF,MCqCHG,E,YAnCb,aAAc,IAAD,8BACX,+CASFH,YAAc,SAAAI,GACZ,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SARpC,EAAKC,MAAM,CACTC,MAAM,GACNJ,YAAY,IALH,E,iFAcO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,MAAOK,S,+BAG9B,IAAD,EACsB3B,KAAKqB,MAA1BC,EADD,EACCA,MAAMJ,EADP,EACOA,YACPU,EAAgBN,EAAMO,QAC1B,SAAA3B,GAAG,OAAEA,EAAIE,KAAK0B,cAAcC,SAASb,EAAYY,kBAErD,OACE,yBAAKjC,UAAU,OACb,iDACD,kBAAC,EAAD,CAAWc,YAAY,iBAAiBC,YAAaZ,KAAKY,cAC1D,kBAAC,EAAD,CAAUR,KAAMwB,S,GAhCHtB,aCKE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.0d999d75.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './card.styles.css';\n\nclass Card extends Component{\n    render(){\n        return(\n            <div className='card-container'>\n                <img alt=\"mon\" src={`https://robohash.org/${this.props.mon.id + 10}?set=set2&size=180x180`}/>\n                <h2>{this.props.mon.name}</h2>\n                <p>{this.props.mon.email}</p>\n\n            </div>\n        );\n    }\n}\nexport default Card;","import React,{Component} from 'react';\nimport './card-list.styles.css';\nimport Card from '../card/card.component';\n\nclass CardList extends Component{\nrender(){\n    return(\n        <div className='cardlist'>\n            {this.props.name.map(mon=><Card mon={mon} key={mon.id}/>)}\n        </div>\n    );\n}\n}\n\nexport default CardList;","import React,{Component} from 'react';\nimport './searchbox.styles.css';\n\nexport const SearchBox = ({placeholder,handleEvent})=> (\n    <input\n        type='search'\n        placeholder={placeholder}\n        className='search'\n        onChange={handleEvent} />\n);","import React,{Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport { SearchBox } from './components/SearchBox/searchbox.component';\n//import { throwStatement } from '@babel/types';\n\nclass App extends Component {\n\n\n  constructor(){\n    super();\n\n    this.state={\n      array:[],\n      searchField:''\n    };\n\n  }\n\n  handleEvent = e => {\n    this.setState({searchField:e.target.value})\n  } ;\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({array: users}));\n  }\n\n  render(){\n    const {array,searchField} = this.state;\n    const filteredArray = array.filter(\n      mon=>mon.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  return (\n    <div className=\"App\">\n      <h1> Monster Rolodex </h1>\n     <SearchBox placeholder='search monster' handleEvent={this.handleEvent}/>\n     <CardList name={filteredArray}/>\n    </div>  \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}